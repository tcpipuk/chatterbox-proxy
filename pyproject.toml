[project]
name = "chatterbox-proxy"
version = "0.1.0"
description = "A proxy for the Chatterbox TTS API"
readme = "README.md"
license = { text = "MIT" }
authors = [{ name = "Tom Foster", email = "tom@tcpip.uk" }]
maintainers = [{ name = "Tom Foster", email = "tom@tcpip.uk" }]
requires-python = ">=3.13"
classifiers = [
  "Development Status :: 4 - Beta",
  "License :: OSI Approved :: MIT License",
  "Topic :: Communications :: Chat",
  "Framework :: AsyncIO",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.13",
]
dependencies = ["fastapi>=0.115", "httpx>=0.28", "uvicorn[standard]>=0.34"]

[project.urls]
Homepage = "https://github.com/tcpipuk/chatterbox-proxy"

[dependency-groups]
dev = ["ruff>=0.9"]

[tool.uv]
package = true

[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

[tool.ruff]
cache-dir = "/tmp/.ruff_cache"
fix = true
line-length = 110
preview = true
show-fixes = false
target-version = "py313"
unsafe-fixes = true

[tool.ruff.format]
line-ending = "auto"
skip-magic-trailing-comma = false

[tool.ruff.lint]
fixable = ["ALL"]
ignore = [
  "ANN401",  # use of Any type
  "BLE001",  # blind Exception usage
  "COM812",  # missing trailing comma
  "CPY",     # flake8-copyright
  "FBT",     # boolean arguments
  "PLR0912", # too many branches
  "PLR0913", # too many arguments
  "PLR0915", # too many statements
  "PLR0917", # too many positional arguments
  "RUF029",  # async methods that don't await
  "S104",    # binding to all interfaces
  "S110",    # passed exceptions
  "TRY301",  # raise inside try block
]
select = ["ALL"]
unfixable = [
  "F841",   # local variable assigned but never used
  "RUF100", # unused noqa comments
  "T201",   # don't strip print statement
]

[tool.ruff.lint.isort]
combine-as-imports = true
required-imports = ["from __future__ import annotations"]

[tool.ruff.lint.per-file-ignores]
"tests/**" = [
  "ANN",     # Ignore missing type annotations
  "ARG",     # Ignore argument issues
  "C901",    # Ignore complex methods
  "DOC201",  # Ignore "return" in docstrings
  "DOC402",  # Ignore "yield" in docstrings
  "PLR2004", # Ignore magic values
  "RET",     # Ignore return issues
  "S404",    # Ignore subprocess module
  "S603",    # Ignore subprocess usage
  "S607",    # Ignore subprocess with relative path
  "SLF001",  # private member access
]

[tool.ruff.lint.pydocstyle]
convention = "google"
